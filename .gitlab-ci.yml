image:
  name: gcr.io/kaniko-project/executor:debug
  entrypoint: [""]

stages:
  - build
  - containerize
  - deploy

variables:
  VERSIONLABELMETHOD: "OnlyIfThisCommitHasVersion" # options: "OnlyIfThisCommitHasVersion","LastVersionTagInGit"
  IMAGE_LABELS: >
    --label org.opencontainers.image.vendor=$CI_SERVICE_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.authors=$CI_SERVICE_URL/$GITLAB_USER_LOGIN
    --label org.opencontainers.image.revision=$CI_COMMIT_SHA
    --label org.opencontainers.image.source=$CI_PROJECT_URL
    --label org.opencontainers.image.documentation=$CI_PROJECT_URL
    --label org.opencontainers.image.licenses=$CI_PROJECT_URL
    --label org.opencontainers.image.url=$CI_PROJECT_URL
    --label vcs-url=$CI_PROJECT_URL
    --label com.gitlab.ci.user=$CI_SERVICE_URL/$GITLAB_USER_LOGIN
    --label com.gitlab.ci.email=$GITLAB_USER_EMAIL
    --label com.gitlab.ci.tagorbranch=$CI_COMMIT_REF_NAME
    --label com.gitlab.ci.pipelineurl=$CI_PIPELINE_URL
    --label com.gitlab.ci.commiturl=$CI_PROJECT_URL/commit/$CI_COMMIT_SHA
    --label com.gitlab.ci.cijoburl=$CI_JOB_URL
    --label com.gitlab.ci.mrurl=$CI_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_ID

cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"

get-latest-git-version:
  stage: .pre
  image:
    name: alpine/git
    entrypoint: [""]
  rules:
    - if: '$VERSIONLABELMETHOD == "LastVersionTagInGit"'
  script:
    - |
      echo "the google kaniko container does not have git and does not have a package manager to install it"
      git clone https://github.com/GoogleContainerTools/kaniko.git
      cd kaniko
      echo "$(git describe --abbrev=0 --tags)" > ../VERSIONTAG.txt
      echo "VERSIONTAG.txt contains $(cat ../VERSIONTAG.txt)"
  artifacts:
    paths:
      - VERSIONTAG.txt

.package_with_kaniko:
  stage: build
  interruptible: true
  variables:
    # Prevent any git checkout or cleanup. Add this for all jobs but the first one.
    #GIT_STRATEGY: none
  script:
    - echo "Hello $REGISTRY_IMAGE"
    - |
      echo "Building and shipping image to $REGISTRY_IMAGE"
      echo "Using Dockerfile: $PROJECT_DIR/Dockerfile"
      #Build date for opencontainers
      BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
      BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
      IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
      #Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
      if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then VERSIONLABEL=$(cat VERSIONTAG.txt); fi
      if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi
      ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $REGISTRY_IMAGE:$TAG "; 
        done; 
      fi
      #Reformat Docker tags to kaniko's --destination argument:
      FORMATTEDTAGLIST=$(echo "${FORMATTEDTAGLIST}" | sed s/\-\-tag/\-\-destination/g) 
      echo $FORMATTEDTAGLIST
      echo $IMAGE_LABELS
      mkdir -p /kaniko/.docker
      echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
      /kaniko/executor --context $PROJECT_DIR --dockerfile $PROJECT_DIR/Dockerfile $FORMATTEDTAGLIST $IMAGE_LABELS

build-server:
  only:
    - main
  image: node
  stage: build
  interruptible: true
  script:
    - |
      echo " ðŸ›   Building: Server..."
      mkdir build_SERVICE
      cp -R server-node/ ./build_SERVICE/
      cp -R deploy/ ./deploy_SERVICE/
  artifacts:
    paths:
      - build_SERVICE
      - deploy_SERVICE

containerize-server:
  needs: ["build-server"]
  only:
    - main
  variables:
    GIT_STRATEGY: none
  stage: containerize
  interruptible: true
  extends: .package_with_kaniko
  environment:
    name: push-to-gitlab-project-registry
  before_script:
    - |
      echo " ðŸš¢  Deploying: Server"
      cp deploy_SERVICE/Dockerfile build_SERVICE
      export PROJECT_DIR=build_SERVICE
      export REGISTRY_IMAGE=$CI_REGISTRY_IMAGE
      echo ðŸ›  Building: SERVER to $REGISTRY_IMAGE
